openapi: 3.0.3
info:
  title: REST API Specification
  version: 1.0.0
  contact:
    name: Ismar Hadžić
    url: https://thebumpaster.com
    email: hadzicismar67@gmail.com
servers:
  - url: '{protocol}://{host}:{port}'
    description: Service Endpoint
    variables:
      protocol:
        default: http
      host:
        default: localhost
      port:
        default: "3001"
paths:
  /api/v1/system/signup:
    post:
      requestBody:
        required: true
        content:
          application/json:
            example:
              username: alphanumericusername
              password: eightcharachters
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      tags:
        - System
      description: Sign up to the system (username, password)
      responses:
        201:
          description: Successfully created user
          content:
            application/json:
              example:
                meta: {}
                result:
                  message: User created.
                  user:
                    username: alphanumericusername
                    password: b2369f41f18fa68e0434b6b7f4e62a188b1c9bedf
                    _id: 6134b44c6c0e0e4eaf8c63f6
                    createdAt: 2021-09-05T12:13:00.374Z
                    updatedAt: 2021-09-05T12:13:00.374Z
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    type: object
                    properties:
                      message:
                        type: string
                      user:
                        $ref: '#/components/schemas/userDocument'
        400:
          description: Invalid request
          content:
            application/json:
              example:
                meta: {}
                result:
                  message: Invalid input values.
                errors:
                  - original:
                      username: goodusername
                      password: badpass
                    details:
                      - message: "\"password\" length must be at least 8 characters long"
                        path:
                          - password
                        type: string.min
                        context:
                          limit: 8
                          value: badpass
                          label: password
                          key: password
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    type: object
                    properties:
                      message:
                        type: string
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/invalidSignPayload'
  /api/v1/system/signin:
    post:
      requestBody:
        required: true
        content:
          application/json:
            example:
              username: alphanumericusername
              password: eightcharachters
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      tags:
        - System
      description: Logs in an existing user with a password
      responses:
        200:
          description: Successfully created token
          content:
            application/json:
              example:
                meta: {}
                result:
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFscGhhbnVtZXJpY3VzZXJuYW1lIiwiX2lkIjoiNjEzNGI2ZmQ2YzBlMGU0ZWFmOGM2M2Y5IiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wNVQxMjoyNDoyOS41MjdaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wNVQxMjoyNDoyOS41MjdaIiwiaWF0IjoxNjMwODQ0Njc2LCJleHAiOjE2MzA4NDUyNzYsImF1ZCI6ImxvY2FsaG9zdDozMDAxIiwiaXNzIjoibG9jYWxob3N0In0.fDgORM8AcIT3-P7ya9dINP3dJAHZdRyFAud1rMnGMwU
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    type: object
                    properties:
                      token:
                        type: string
        400:
          description: Invalid payload or password and username combination
          content:
            application/json:
              example:
                meta: { }
                result:
                  message: Username and password combination does not match.
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    type: object
                    properties:
                      message:
                        type: string

  /api/v1/system/me:
    get:
      parameters:
        - in: header
          name: Authorization
          description: Bearer JWT Authorization Token ( Use Authorize button in SwaggerUI to set this value )
          schema:
            type: string
          allowReserved: true
      security:
        - bearerAuth: []
      tags:
        - System
      description: Get the currently logged in user information
      responses:
        200:
          description: Get the currently logged in user information
          content:
            application/json:
              example:
                meta: {}
                result:
                  username: alphanumericusername
                  _id: 6134b6fd6c0e0e4eaf8c63f9
                  createdAt: 2021-09-05T12:24:29.527Z
                  updatedAt: 2021-09-05T12:24:29.527Z
                  iat: 1630844676
                  exp: 1630845276
                  aud: localhost:3001
                  iss: localhost
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    $ref: '#/components/schemas/userTokenPayload'
        401:
          description: Unauthorized or invalid token
          content:
            application/json:
              example:
                result:
                  message: Authorization token is required.
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      message:
                        type: string

  /api/v1/users/:
    post:
      requestBody:
        required: true
        content:
          application/json:
            example:
              username: alphanumericusername
              password: eightcharachters
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      tags:
        - User
      description: Create a new user (username, password)
      security:
        - bearerAuth: [ ]
      parameters:
        - in: header
          name: Authorization
          description: Bearer JWT Authorization Token ( Use Authorize button in SwaggerUI to set this value )
          schema:
            type: string
          allowReserved: true
      responses:
        201:
          description: Successfully created user
          content:
            application/json:
              example:
                meta: { }
                result:
                  message: User created.
                  user:
                    username: alphanumericusername
                    password: b2369f41f18fa68e0434b6b7f4e62a188b1c9bedf
                    _id: 6134b44c6c0e0e4eaf8c63f6
                    createdAt: 2021-09-05T12:13:00.374Z
                    updatedAt: 2021-09-05T12:13:00.374Z
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    type: object
                    properties:
                      message:
                        type: string
                      user:
                        $ref: '#/components/schemas/userDocument'
        400:
          description: Invalid request
          content:
            application/json:
              example:
                meta: { }
                result:
                  message: Invalid input values.
                errors:
                  - original:
                      username: goodusername
                      password: badpass
                    details:
                      - message: "\"password\" length must be at least 8 characters long"
                        path:
                          - password
                        type: string.min
                        context:
                          limit: 8
                          value: badpass
                          label: password
                          key: password
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    type: object
                    properties:
                      message:
                        type: string
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/invalidSignPayload'
    get:
      tags:
        - User
      description: Query user list
      parameters:
        - in: header
          name: Authorization
          description: Bearer JWT Authorization Token ( Use Authorize button in SwaggerUI to set this value )
          schema:
            type: string
          allowReserved: true
        - in: query
          name: limit
          description: Number of users to return in response
          schema:
            type: number
        - in: query
          name: skip
          description: Number of users to skip by the order
          schema:
            type: number
        - in: query
          name: filterQuery
          description: FilterQuery<IUserDocument> from mongoose
          schema:
            example:
              filterQuery:
                username: alphanumericusername
            type: object
            properties:
              filterQuery:
                type: object
                properties:
                  username:
                    type: string
                  createdAt:
                    type: string
                  updatedAt:
                    type: string
                  id:
                    type: string
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Returns a list of users by submitted query
          content:
            application/json:
              example:
                meta: { }
                result:
                  - username: alphanumericusername
                    password: b2369f41f18fa68e0434b6b7f4e62a188b1c9bedf
                    _id: 6134b44c6c0e0e4eaf8c63f6
                    createdAt: 2021-09-05T12:13:00.374Z
                    updatedAt: 2021-09-05T12:13:00.374Z
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/userDocument'
        401:
          description: Unauthorized
          content:
            application/json:
              example:
                result:
                  message: Authorization token is required.
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      message:
                        type: string

  /api/v1/users/{id}:
    delete:
      tags:
        - User
      description: Delete a user by user ID
      parameters:
        - in: header
          name: Authorization
          description: Bearer JWT Authorization Token ( Use Authorize button in SwaggerUI to set this value )
          schema:
            type: string
          allowReserved: true
        - in: path
          name: id
          description: User Id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Successful response
          content:
            application/json:
              example:
                meta: { }
                result: {}
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    type: object
        400:
          description: Password do not match
          content:
            application/json:
              example:
                meta: { }
                result:
                  message: ID passed is not an ObjectId
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    type: object
                    properties:
                      message:
                        type: string
        401:
          description: Unauthorized
          content:
            application/json:
              example:
                result:
                  message: Authorization token is required.
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      message:
                        type: string
        404:
          description: User not found response
          content:
            application/json:
              example:
                meta: { }
                result:
                  message: User does not exist with this id
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    type: object
                    properties:
                      message:
                        type: string
    get:
      tags:
        - User
      description: Get user details by user ID
      parameters:
        - in: header
          name: Authorization
          description: Bearer JWT Authorization Token ( Use Authorize button in SwaggerUI to set this value )
          schema:
            type: string
          allowReserved: true
        - in: path
          name: id
          description: User Id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    $ref: '#/components/schemas/userDocument'
        400:
          description: User ID provided is not an objectId
          content:
            application/json:
              example:
                meta: { }
                result:
                  message: Old password does not match current password.
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    type: object
                    properties:
                      message:
                        type: string
        401:
          description: Unauthorized
          content:
            application/json:
              example:
                result:
                  message: Authorization token is required.
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      message:
                        type: string
        404:
          description: User not found response
          content:
            application/json:
              example:
                meta: {}
                result:
                  message: User does not exist with this id
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    type: object
                    properties:
                      message:
                        type: string
    put:
      tags:
        - User
      description: Update user by user ID
      parameters:
        - in: header
          name: Authorization
          description: Bearer JWT Authorization Token ( Use Authorize button in SwaggerUI to set this value )
          schema:
            type: string
          allowReserved: true
        - in: path
          name: id
          description: User Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    $ref: '#/components/schemas/userDocument'
        400:
          description: Password do not match
          content:
            application/json:
              example:
                meta: { }
                result:
                  message: Old password does not match current password.
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    type: object
                    properties:
                      message:
                        type: string
        401:
          description: Unauthorized
          content:
            application/json:
              example:
                result:
                  message: Authorization token is required.
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      message:
                        type: string
        404:
          description: User not found response
          content:
            application/json:
              example:
                meta: { }
                result:
                  message: User does not exist with this id
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  result:
                    type: object
                    properties:
                      message:
                        type: string

  /api/v1/health/liveness:
    get:
      tags:
        - Health
      description: "Returns status response of API server"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
  /api/v1/health/readiness:
    get:
      tags:
        - Health
      description: "Returns services availability response of API server"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object

components:
  schemas:
    userTokenPayload:
      type: object
      properties:
        username:
          type: string
        _id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        iat:
          type: number
        exp:
          type: number
        aud:
          type: string
        idd:
          type: string
    userDocument:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        _id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    userPublicData:
      type: object
      properties:
        username:
          type: string
    invalidSignPayload:
      type: object
      properties:
        _original:
          type: object
          properties:
            username:
              type: string
            password:
              type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/InvalidSignPayloadDetails'
    InvalidSignPayloadDetails:
      type: object
      properties:
        message:
          type: string
        path:
          type: array
          items:
            type: string
        context:
          type: object
          properties:
            limit:
              type: number
            value:
              type: string
            label:
              type: string
            key:
              type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

